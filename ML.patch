diff --git a/java/Controller.java b/java/Controller.java
index 742c086..4fc059e 100644
--- a/java/Controller.java
+++ b/java/Controller.java
@@ -10,13 +10,13 @@ public class Controller{
    private static final double[][] BBOX = {{-122.0005555550000054,38.9994444450000017},{-120.9994444449999946,40.0005555549999983}};
    private static final String OUTPUT = "out";
    public static void main(String[] args) throws InterruptedException{
-      Model.init(DEM_FILE_NAME, LAND_COVER_FILE_NAME, WIND_DIRECTION);
+      //Model.init(DEM_FILE_NAME, LAND_COVER_FILE_NAME, WIND_DIRECTION);
       View v = new View(INIT_WIDTH, INIT_HEIGHT);
 
       while(true){ //going to change this to a key listener TODO
          if (reset) {
             reset = false;
-            Model.reset();
+            //Model.reset();
          }
          if(running){
             update();
@@ -31,43 +31,43 @@ public class Controller{
       running = !running;
    }
    public static void update() throws NullPointerException{
-      if(Model.activeFires.size() == 0){
-         running = false;
-         System.out.println("exporting!");
-         Model.export(OUTPUT, BBOX);
-      }
+      //if(Model.activeFires.size() == 0){
+      //   running = false;
+      //   System.out.println("exporting!");
+      //   Model.export(OUTPUT, BBOX);
+      //}
       ArrayList<Model.Cell> newCells = new ArrayList<Model.Cell>();
-      Model.incrementStepCount();
-      for(int i = 0; i < Model.activeFires.size(); i++){
-         Model.Cell c = Model.activeFires.get(i);
-         int cx = c.getX() - 1;
-         int cy = c.getY() - 1;
-         for(int xoffset = 0; xoffset < 3; xoffset++){
-            for(int yoffset = 0; yoffset < 3; yoffset++){
-               try{
-                  Model.Cell tempCell = Model.cells.get(cy + yoffset).get(cx + xoffset).update();
-                  if(tempCell != null && !newCells.contains(tempCell)){
-                     newCells.add(tempCell);
-                  }
-               } catch (ArrayIndexOutOfBoundsException e){
-                  continue;
-               } catch(IndexOutOfBoundsException e){
-                  continue;
-               }
-            }
-         }
-      }
-      for(Model.Cell c : newCells){
-         Model.cells.get(c.getY()).set(c.getX(), c);
-         Model.activeFires.add(c);
-      }
-      int rem = 0;
-      for(int i = 0; i < Model.activeFires.size(); i++){
-         if(!Model.activeFires.get(i).getType().equalsIgnoreCase("fire")){
-            rem++;
-            Model.activeFires.remove(i);
-            i--;
-         }
-      }
+      //Model.incrementStepCount();
+      //for(int i = 0; i < Model.activeFires.size(); i++){
+      //   Model.Cell c = Model.activeFires.get(i);
+      //   int cx = c.getX() - 1;
+      //   int cy = c.getY() - 1;
+      //   for(int xoffset = 0; xoffset < 3; xoffset++){
+      //      for(int yoffset = 0; yoffset < 3; yoffset++){
+      //         try{
+      //            Model.Cell tempCell = Model.cells.get(cy + yoffset).get(cx + xoffset).update();
+      //            if(tempCell != null && !newCells.contains(tempCell)){
+      //               newCells.add(tempCell);
+      //            }
+      //         } catch (ArrayIndexOutOfBoundsException e){
+      //            continue;
+      //         } catch(IndexOutOfBoundsException e){
+      //            continue;
+      //         }
+      //      }
+      //   }
+      //}
+      //for(Model.Cell c : newCells){
+      //   Model.cells.get(c.getY()).set(c.getX(), c);
+      //   Model.activeFires.add(c);
+      //}
+      //int rem = 0;
+      //for(int i = 0; i < Model.activeFires.size(); i++){
+      //   if(!Model.activeFires.get(i).getType().equalsIgnoreCase("fire")){
+      //      rem++;
+      //      Model.activeFires.remove(i);
+      //      i--;
+      //   }
+      //}
    }
 }
diff --git a/java/MLController.java b/java/MLController.java
index de165ad..0c262de 100644
--- a/java/MLController.java
+++ b/java/MLController.java
@@ -10,9 +10,9 @@ import java.util.Comparator;
 import java.util.Random;
 
 public class MLController {
+   private static int doneThreads = 0;
    private static Random rand = new Random();
    private static boolean reset = false;
-   private static boolean running = true;
    private static final String DEM_FILE_NAME = "data/PARADISE/dem.jpg";
    private static final String LAND_COVER_FILE_NAME = "data/PARADISE/lc.jpg";
    private static final String WIND_DIRECTION = "SW";
@@ -20,62 +20,58 @@ public class MLController {
    private static final int[] START = {1160,322};
    //private static final int[] START = {230, 60};
    private static final String OUTPUT_BASE = "LEARN/learning";
-   private static String OUTPUT = "";
-   private static final int N_CHILDREN = 25;
+   //private static String OUTPUT = "";
+   private static final int N_CHILDREN = 12;
    private static final double DROP_PERCENT = .9;
    private static final int N_GEN = 50;
+   private static final int N_THREADS = 4;
    private static BufferedImage SOL_IMG;
    public static void main(String[] args) throws InterruptedException{
       try {
-         SOL_IMG = Model.toBufferedImage(Imaging.getBufferedImage(new File("LEARN/SOLUTION.PNG")).getScaledInstance(Model.TARGET_WIDTH,Model.TARGET_HEIGHT,0));
+         SOL_IMG = Model.toBufferedImage(Imaging.getBufferedImage(new File("SOLUTION.PNG")).getScaledInstance(Model.TARGET_WIDTH,Model.TARGET_HEIGHT,0));
       } catch(Exception e){
          System.out.println(e);
          System.exit(-1);
       }
-      Model.init(DEM_FILE_NAME, LAND_COVER_FILE_NAME, WIND_DIRECTION);
+
       ArrayList<ModelVars> children = new ArrayList<>();
       for(int i = 0; i < N_CHILDREN; i++){
-         children.add(new ModelVars());
+         children.add(new ModelVars(DEM_FILE_NAME, LAND_COVER_FILE_NAME, WIND_DIRECTION));
       }
 
-      long timer = 0;
+      ArrayList<FireThread> threads = new ArrayList<>();
+      int start = 0;
+      int length = children.size() / N_THREADS;
+      for(int i = 0; i < N_THREADS; i++){
+         threads.add(new FireThread(new ArrayList<>(children.subList(start,start + length)), i, start));
+         start = Math.min(start+length, children.size() -1);
+      }
+      System.out.println("INFO");
+      System.out.println(threads.size());
       for(int i = 0; i < N_GEN; i++) {
          System.out.println("starting gen " + i);
-         int count = 0;
-         for (ModelVars child : children) {
-            OUTPUT = OUTPUT_BASE + "gen" + i + "child" + count + child.toString();
-            System.out.println(OUTPUT);
-            Model.setVariables(child.MAX_FIRE_AGE, child.SEARCH_BOX_OFFSET, child.WIND_MOD, child.BASE_PROB, child.START_THRESHOLD);
-            Model.reset();
-            Model.startFire(START[0], START[1]);
-            running = true;
-            timer = System.nanoTime();
-            while (running) { //going to change this to a key listener TODO
-               update();
-               if(System.nanoTime() - timer > 10000000000L){
-                  //System.out.println("killed early");
-                  //System.out.println("decrementing base, and running this one again");
-                  //child.BASE_PROB-=.1;
-                  //Model.setVariables(child.MAX_FIRE_AGE, child.SEARCH_BOX_OFFSET, child.WIND_MOD, child.BASE_PROB, child.START_THRESHOLD);
-                  //Model.reset();
-                  //Model.startFire(START[0], START[1]);
-                  //timer = System.nanoTime();
-                  //running = true;
-                  running = false;
-                  System.out.println("killing blob");
-                  child.LIKE_CELLS = -1;
-                  Model.export(OUTPUT, BBOX);
-               }
+         System.out.println("done with gen " + i);
+         for(FireThread t : threads){
+            if(t.getState().equals(Thread.State.NEW)){
+               t.start();
             }
-            count++;
+            t.gen = i;
          }
-         System.out.println("done with gen " + i);
+         System.out.println("waiting");
+         for(FireThread t: threads){
+            while(doneThreads < N_THREADS){
+               Thread.sleep(1000);
+               System.out.println(doneThreads);
+            }
+         }
+         System.out.println("all are done");
          findBest(children, i);
          children.sort((ModelVars o1, ModelVars o2) -> o1.LIKE_CELLS < o2.LIKE_CELLS ? -1 : 1);
          int cutoff = (int)((children.size() - 1) * DROP_PERCENT);
          for(int j = 0; j < cutoff; j++){
             children.get(j).mutate(children.get(children.size() - 1));
          }
+         doneThreads = 0;
       }
 
       System.out.println("done running");
@@ -105,7 +101,7 @@ public class MLController {
       for(int i = 0; i < children.size(); i++){
          try {
             if(children.get(i).LIKE_CELLS != -1){
-               String thisName = OUTPUT_BASE + "gen" + gen + "child" + i + children.get(i).toString() + ".png";
+               String thisName = children.get(i).OUTPUT + ".png";//OUTPUT_BASE + "gen" + gen + "child" + i + children.get(i).toString() + ".png";
                BufferedImage thisImage = Model.toBufferedImage(Imaging.getBufferedImage(new File(thisName)).getScaledInstance(Model.TARGET_WIDTH,Model.TARGET_HEIGHT,0));
                likePixels = findLike(thisImage, SOL_IMG);
                children.get(i).LIKE_CELLS = likePixels;
@@ -116,8 +112,10 @@ public class MLController {
                best = children.get(i);
                max = likePixels;
             }
+            System.out.println("success");
          } catch(Exception e){
-            System.out.println(e);
+            e.printStackTrace();
+
          }
       }
       System.out.println("best count is " + max);
@@ -126,25 +124,23 @@ public class MLController {
    public static void reset(){
       reset = true;
    }
-   public static void toggleRun(){
-      running = !running;
-   }
-   public static void update() throws NullPointerException{
-      if(Model.activeFires.size() == 0){
-         running = false;
+   public static void update(ModelVars child) throws NullPointerException{
+      Model model = child.model;
+      if(model.activeFires.size() == 0){
+         child.running = false;
          System.out.println("exporting!");
-         Model.export(OUTPUT, BBOX);
+         model.export(child.OUTPUT, BBOX);
       }
       ArrayList<Model.Cell> newCells = new ArrayList<Model.Cell>();
-      Model.incrementStepCount();
-      for(int i = 0; i < Model.activeFires.size(); i++){
-         Model.Cell c = Model.activeFires.get(i);
+      model.incrementStepCount();
+      for(int i = 0; i < model.activeFires.size(); i++){
+         Model.Cell c = model.activeFires.get(i);
          int cx = c.getX() - 1;
          int cy = c.getY() - 1;
          for(int xoffset = 0; xoffset < 3; xoffset++){
             for(int yoffset = 0; yoffset < 3; yoffset++){
                try{
-                  Model.Cell tempCell = Model.cells.get(cy + yoffset).get(cx + xoffset).update();
+                  Model.Cell tempCell = model.cells.get(cy + yoffset).get(cx + xoffset).update();
                   if(tempCell != null && !newCells.contains(tempCell)){
                      newCells.add(tempCell);
                   }
@@ -157,26 +153,92 @@ public class MLController {
          }
       }
       for(Model.Cell c : newCells){
-         Model.cells.get(c.getY()).set(c.getX(), c);
-         Model.activeFires.add(c);
+         model.cells.get(c.getY()).set(c.getX(), c);
+         model.activeFires.add(c);
       }
       int rem = 0;
-      for(int i = 0; i < Model.activeFires.size(); i++){
-         if(!Model.activeFires.get(i).getType().equalsIgnoreCase("fire")){
+      for(int i = 0; i < model.activeFires.size(); i++){
+         if(!model.activeFires.get(i).getType().equalsIgnoreCase("fire")){
             rem++;
-            Model.activeFires.remove(i);
+            model.activeFires.remove(i);
             i--;
          }
       }
    }
+   private static class FireThread extends Thread{
+      private int baseChild;
+      private int num;
+      private Model model;
+      private int gen;
+      private ArrayList<ModelVars> children;
+      public FireThread(ArrayList<ModelVars> children, int n, int start) {
+         this.model = new Model(DEM_FILE_NAME, LAND_COVER_FILE_NAME, WIND_DIRECTION);
+         this.children = children;
+         if(this.children == null){
+            System.out.println("error");
+         }
+         this.num = n;
+         this.baseChild = start;
+      }
+      public void run() {
+         try {
+            System.out.println("running thread " + num);
+            if(model == null){
+               System.out.println("hotdog");
+            }
+            int count = baseChild;
+            int i = gen;
+            long timer;
+            for (ModelVars child : children) {
+               child.OUTPUT = OUTPUT_BASE + "gen" + i + "child" + count + child.toString();
+               System.out.println("starting: " + child.OUTPUT);
+               model.setVariables(child.MAX_FIRE_AGE, child.SEARCH_BOX_OFFSET, child.WIND_MOD, child.BASE_PROB, child.START_THRESHOLD);
+               model.reset();
+               model.startFire(START[0], START[1]);
+               child.running = true;
+               timer = System.nanoTime();
+               while (child.running) { //going to change this to a key listener TODO
+                  if(gen > N_GEN){
+                     return;
+                  }
+                  child.model = this.model;
+                  update(child);
+                  //if(System.nanoTime() - timer > 30000000000L){
+                  if(child.model.activeFires.size() >= child.model.TARGET_HEIGHT * child.model.TARGET_WIDTH / 1000){
+                     child.running = false;
+                     System.out.println("killing blob");
+                     child.LIKE_CELLS = -1;
+                     child.model.export(child.OUTPUT, BBOX);
+                  }
+               }
+               System.out.println("finishing: " + child.OUTPUT);
+               count++;
+            }
+            MLController.doneThreads++;
+            System.out.println("dt is now " + doneThreads);
+            while(MLController.doneThreads > 0){
+               Thread.sleep(1000); //badbadbadbadbadbaedbad
+            }
+            this.run();
+         }
+         catch (Exception e) {
+            // Throwing an exception
+            e.printStackTrace();
+         }
+      }
+   }
    private static class ModelVars{
+      private String OUTPUT = "";
+      private boolean running = true;
       private int LIKE_CELLS;
       private int MAX_FIRE_AGE = 10;
       private int SEARCH_BOX_OFFSET = 10;
       private double WIND_MOD = 6;
       private double BASE_PROB = 1.5;
       private int START_THRESHOLD = 15;
-      private ModelVars(){
+      private Model model;
+      private ModelVars(String DEM_FILE_NAME, String LAND_COVER_FILE_NAME, String WIND_DIRECTION){
+         //model = new Model(DEM_FILE_NAME, LAND_COVER_FILE_NAME, WIND_DIRECTION);
          mutate(this);
       }
       private void mutate(ModelVars m){
diff --git a/java/Model.java b/java/Model.java
index 8e5e2cc..0dda04e 100644
--- a/java/Model.java
+++ b/java/Model.java
@@ -7,37 +7,38 @@ import org.apache.commons.imaging.Imaging;
 import javax.imageio.ImageIO;
 
 public class Model{
-   private static int stepCount = 0;
-   public static final int TARGET_WIDTH = 2000;
-   public static final int TARGET_HEIGHT = 2000;
-   private static int MAX_FIRE_AGE = 10;
-   private static int SEARCH_BOX_OFFSET = 10;
-   private static double WIND_MOD = 6;
-   private static double BASE_PROB = 1.5;
-   private static int START_THRESHOLD = 30;
-   private static Color FIRE_COLOR = Color.RED;
-   private static Color BURNT_COLOR = new Color(139,69,19);
-   private static Color BREAK_COLOR = Color.YELLOW;
-   private static Random rand = new Random();
-   public static int nrows;
-   public static int ncols;
-   public static ArrayList<ArrayList<Cell>> cells;
-   public static ArrayList<Cell> activeFires;
-   public static void init(String dem, String cover, String wind){
+   private  int stepCount = 0;
+   public  static final int TARGET_WIDTH = 2000;
+   public  static final int TARGET_HEIGHT = 2000;
+   private  int MAX_FIRE_AGE = 10;
+   private  int SEARCH_BOX_OFFSET = 10;
+   private  double WIND_MOD = 6;
+   private  double BASE_PROB = 1.5;
+   private  int START_THRESHOLD = 30;
+   private  Color FIRE_COLOR = Color.RED;
+   private  Color BURNT_COLOR = new Color(139,69,19);
+   private  Color BREAK_COLOR = Color.YELLOW;
+   private  Random rand = new Random();
+   public  int nrows;
+   public  int ncols;
+   public  ArrayList<ArrayList<Cell>> cells;
+   public  ArrayList<Cell> activeFires;
+
+   public  Model(String dem, String cover, String wind){
       activeFires = new ArrayList<>();
       cells = new ArrayList<>();
       fillCells(dem, cover, wind);
       nrows = cells.size();
       ncols = nrows > 0 ? cells.get(0).size() : 0;
    }
-   public static void setVariables(int maxfireage, int searchboxoffset, double windmod, double baseprob, int startthreshold){
+   public  void setVariables(int maxfireage, int searchboxoffset, double windmod, double baseprob, int startthreshold){
       MAX_FIRE_AGE = maxfireage;
       SEARCH_BOX_OFFSET = searchboxoffset;
       WIND_MOD = windmod;
       BASE_PROB = baseprob;
       START_THRESHOLD = startthreshold;
    }
-   public static void reset(){
+   public  void reset(){
       for(int y = 0; y < cells.size(); y++){
          for(int x = 0; x < cells.get(0).size(); x++){
             try{
@@ -50,24 +51,24 @@ public class Model{
       activeFires.clear();
       stepCount = 0;
    }
-   public static void startFire(int x, int y){
-      Model.cells.get(y).get(x).setType("fire");
-      Model.cells.get(y).get(x).setAge(0);
-      Model.activeFires.add(Model.cells.get(y).get(x));
-      Model.clearStepCount();
+   public  void startFire(int x, int y){
+      this.cells.get(y).get(x).setType("fire");
+      this.cells.get(y).get(x).setAge(0);
+      this.activeFires.add(this.cells.get(y).get(x));
+      this.clearStepCount();
    }
-   public static void clearStepCount(){
+   public  void clearStepCount(){
       stepCount = 0;
    }
-   public static void incrementStepCount(){
+   public  void incrementStepCount(){
       stepCount++;
    }
-   private static void fillCells(String dem, String cover, String wind){
-      Cell.wind = wind;
+   private  void fillCells(String dem, String cover, String wind){
+      this.wind = wind;
       int[][] coverArr = readTiff(cover);
       int[][] demArr = readTiff(dem);
       try {
-         Cell.cm = Imaging.getBufferedImage(new File(dem)).getColorModel();
+         this.cm = Imaging.getBufferedImage(new File(dem)).getColorModel();
       }catch(Exception e){
          System.out.println(e);
          System.exit(-1);
@@ -97,7 +98,8 @@ public class Model{
       bGr.dispose();
       return bimage;
    }
-   public static void export(String dest, double[][] bbox){
+   public  void export(String dest, double[][] bbox){
+      System.out.println("exporting " + dest);
       BufferedImage img = new BufferedImage(TARGET_WIDTH, TARGET_HEIGHT, BufferedImage.TYPE_INT_ARGB);
       Graphics pen = img.getGraphics();
       for(int y = 0; y < cells.size(); y++){
@@ -127,7 +129,7 @@ public class Model{
          System.out.println("cannot write the file sorry :( ");
       }
    }
-   public static int[][] readTiff(String fname){
+   public  int[][] readTiff(String fname){
       try {
          BufferedImage img = toBufferedImage(Imaging.getBufferedImage(new File(fname)).getScaledInstance(TARGET_WIDTH,TARGET_HEIGHT,0));
          ColorModel cm = img.getColorModel();
@@ -148,17 +150,17 @@ public class Model{
       }
       return null;
    }
-   public static class Cell{
+   private  float max;
+   private  ColorModel cm;
+   private  String wind;
+   public  class Cell{
       private int[] loc;
       private String type;
       private int elevation;
       private int fuelType;
       private String weather;
       private String moisture;
-      private static String wind;
       private int age;
-      private static float max;
-      private static ColorModel cm;
       private void reset(){
          type = "normal";
          age = 0;
diff --git a/java/View.java b/java/View.java
index e6b4a9d..58d6cc3 100644
--- a/java/View.java
+++ b/java/View.java
@@ -98,18 +98,18 @@ public class View extends JFrame {
       @Override
       public void actionPerformed(ActionEvent e){
          viewY+=canvas.getHeight()/2 * zoomFactor;
-         if(viewY + canvas.getHeight() > Model.nrows){
-            viewY = Model.nrows - canvas.getHeight();
-         }
+         //if(viewY + canvas.getHeight() > Model.nrows){
+         //   viewY = Model.nrows - canvas.getHeight();
+         //}
       }
    };
    private Action right = new AbstractAction(RIGHT){
       @Override
       public void actionPerformed(ActionEvent e){
          viewX+=canvas.getWidth()/2 * zoomFactor;
-         if(viewX + canvas.getWidth() > Model.ncols){
-            viewX = Model.ncols - canvas.getWidth();
-         }
+         //if(viewX + canvas.getWidth() > Model.ncols){
+         //   viewX = Model.ncols - canvas.getWidth();
+         //}
       }
    };
    private Action left = new AbstractAction(LEFT){
@@ -142,7 +142,7 @@ public class View extends JFrame {
          for (int y = viewY; y < (this.getHeight() * (zoom)) + viewY; y += (zoom + skipValue)) {
             for (int x = viewX; x < (this.getWidth() * (zoom)) + viewX; x += (zoom + skipValue)) {
                try {
-                  Model.cells.get(y).get(x).draw(g, viewX, viewY, zoom, skipValue);
+                  //Model.cells.get(y).get(x).draw(g, viewX, viewY, zoom, skipValue);
                } catch (Exception e) {
                   continue;
                }
@@ -165,13 +165,13 @@ public class View extends JFrame {
             int x = (e.getX() * zoomFactor) + viewX;
             int y = (e.getY() * zoomFactor) + viewY;
             System.out.println("starting fire at " + x + ", " + y);
-            Model.startFire(x,y);
+            //Model.startFire(x,y);
 
          } catch (IndexOutOfBoundsException obe){
             //System.out.println("oob");
          }
       }
-      
+
       public void mouseEntered(MouseEvent e){
          requestFocus();
       }
@@ -181,6 +181,6 @@ public class View extends JFrame {
       }
       public void mousePressed(MouseEvent e){
       }
-      
+
    }
 }
